/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
* logic: creating an object of seen elements with keys as the elements and values as their indices in the main nums object. Reason: easy retrieval
* and returning element as soon as we find one
 */
var twoSum = function(nums, target) {
    const mapObject={}
    for(let i=0; i<nums.length; i++) {
        const num=nums[i]
        const missingElement= target-num
        
        if(missingElement in mapObject){
            return [i, mapObject[missingElement]]
        }
        mapObject[num]=i
    }
};

Python:

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        dictSeen={}
        for i in range(len(nums)):
            if(dictSeen.get(target-nums[i])!= None):
                return [i,dictSeen.get(target-nums[i])]
            else:
                dictSeen[nums[i]]=i
