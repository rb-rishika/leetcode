# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:
        curr= root

        if not root: 
            return None

        while curr:
            if curr.val>p.val and curr.val> q.val:
                curr= curr.left
            elif curr.val<p.val and curr.val< q.val:
                curr= curr.right
            else:
                return curr

#treat it like a normal binary search array. 
#Complexity: log (height)


# Build the BST
#        6
#       / \
#      2   8
#     / \ / \
#    0  4 7  9
#      / \
#     3   5

root = TreeNode(6)
root.left = TreeNode(2)
root.right = TreeNode(8)
root.left.left = TreeNode(0)
root.left.right = TreeNode(4)
root.left.right.left = TreeNode(3)
root.left.right.right = TreeNode(5)
root.right.left = TreeNode(7)
root.right.right = TreeNode(9)

# Define the nodes p and q
p = root.left       # Node with value 2
q = root.left.right # Node with value 4

# Call the function
sol = Solution()
lca = sol.lowestCommonAncestor(root, p, q)
print(f"LCA of {p.val} and {q.val} is {lca.val}")
        
