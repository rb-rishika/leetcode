class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        # def dfs(i, curr_sum):
        #     #Base:
        #     if i==len(nums):
        #         return 1 if curr_sum== target else 0
        #     return (
        #         dfs(i+1, curr_sum+nums[i]) #either add curr number or subtract
        #         + dfs(i+1, curr_sum-nums[i]))
        # return dfs(0,0)
        dp={}
        def dfs(i, curr_sum):
            print(i, curr_sum)
            #Base:
            if i==len(nums):
                return 1 if curr_sum== target else 0
            if (i,curr_sum) in dp:
                return dp[(i, curr_sum)]
            #either add curr number or subtract
            dp[(i, curr_sum)]= dfs(i+1, curr_sum+nums[i]) + dfs(i+1, curr_sum-nums[i])
            print(dp)
            return dp[(i, curr_sum)]
        return dfs(0,0)

TC= O(n*total_sum)
-ve to +ve


# 0 0
# 1 2
# 2 4
# 3 6
# 3 2
# {(2, 4): 0}
# 2 0
# 3 2
# 3 -2
# {(2, 4): 0, (2, 0): 0}
# {(2, 4): 0, (2, 0): 0, (1, 2): 0}
# 1 -2
# 2 0
# 2 -4
# 3 -2
# 3 -6
# {(2, 4): 0, (2, 0): 0, (1, 2): 0, (2, -4): 0}
# {(2, 4): 0, (2, 0): 0, (1, 2): 0, (2, -4): 0, (1, -2): 0}
# {(2, 4): 0, (2, 0): 0, (1, 2): 0, (2, -4): 0, (1, -2): 0, (0, 0): 0}
        
